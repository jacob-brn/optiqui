{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "macbook",
  "type": "registry:component",
  "title": "Macbook",
  "description": "Fully responsive Macbook made react and tailwindcss",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/ui/Macbook.tsx",
      "content": "\"use client\";\r\nimport {\r\n  TbBrightnessDown,\r\n  TbBrightnessUp,\r\n  TbCaretDownFilled,\r\n  TbCaretLeftFilled,\r\n  TbCaretRightFilled,\r\n  TbCaretUpFilled,\r\n  TbChevronUp,\r\n  TbCommand,\r\n  TbMicrophone,\r\n  TbMoon,\r\n  TbPlayerSkipForward,\r\n  TbPlayerTrackNext,\r\n  TbPlayerTrackPrev,\r\n  TbSearch,\r\n  TbTable,\r\n  TbVolume,\r\n  TbVolume2,\r\n  TbVolume3,\r\n  TbWorld,\r\n} from \"react-icons/tb\";\r\nimport { PiOption } from \"react-icons/pi\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { motion } from \"motion/react\";\r\nimport { useState, useEffect, useMemo } from \"react\";\r\n\r\ninterface keyType {\r\n  key: string;\r\n  special?: boolean;\r\n  icon?: React.ReactNode;\r\n  align?: \"start\" | \"center\" | \"end\";\r\n  width?: string;\r\n  content?: React.ReactNode;\r\n  topChar?: string;\r\n  type?: string;\r\n  topRight?: string | React.ReactNode;\r\n  topLeft?: string | React.ReactNode;\r\n  bottomLeft?: string | React.ReactNode;\r\n}\r\n\r\nconst keys: Array<keyType[]> = [\r\n  [\r\n    { key: \"esc\", special: true, align: \"start\", width: \"w-10\" },\r\n    { key: \"F1\", icon: <TbBrightnessDown className=\"h-[6px] w-[6px]\" /> },\r\n    { key: \"F2\", icon: <TbBrightnessUp className=\"h-[6px] w-[6px]\" /> },\r\n    { key: \"F3\", icon: <TbTable className=\"h-[6px] w-[6px]\" /> },\r\n    { key: \"F4\", icon: <TbSearch className=\"h-[6px] w-[6px]\" /> },\r\n    { key: \"F5\", icon: <TbMicrophone className=\"h-[6px] w-[6px]\" /> },\r\n    { key: \"F6\", icon: <TbMoon className=\"h-[6px] w-[6px]\" /> },\r\n    { key: \"F7\", icon: <TbPlayerTrackPrev className=\"h-[6px] w-[6px]\" /> },\r\n    { key: \"F8\", icon: <TbPlayerSkipForward className=\"h-[6px] w-[6px]\" /> },\r\n    { key: \"F9\", icon: <TbPlayerTrackNext className=\"h-[6px] w-[6px]\" /> },\r\n    { key: \"F10\", icon: <TbVolume className=\"h-[6px] w-[6px]\" /> },\r\n    { key: \"F11\", icon: <TbVolume2 className=\"h-[6px] w-[6px]\" /> },\r\n    { key: \"F12\", icon: <TbVolume3 className=\"h-[6px] w-[6px]\" /> },\r\n    {\r\n      key: \"power\",\r\n      content: (\r\n        <div className=\"h-4 w-4 rounded-full bg-gradient-to-b from-20% from-neutral-900 via-black via-50% to-neutral-900 to-95% p-px\">\r\n          <div className=\"bg-black h-full w-full rounded-full\" />\r\n        </div>\r\n      ),\r\n    },\r\n  ],\r\n  [\r\n    { key: \"`\", topChar: \"~\" },\r\n    { key: \"1\", topChar: \"!\" },\r\n    { key: \"2\", topChar: \"@\" },\r\n    { key: \"3\", topChar: \"#\" },\r\n    { key: \"4\", topChar: \"$\" },\r\n    { key: \"5\", topChar: \"%\" },\r\n    { key: \"6\", topChar: \"^\" },\r\n    { key: \"7\", topChar: \"&\" },\r\n    { key: \"8\", topChar: \"*\" },\r\n    { key: \"9\", topChar: \"(\" },\r\n    { key: \"0\", topChar: \")\" },\r\n    { key: \"_\", topChar: \"â€”\" },\r\n    { key: \"=\", topChar: \"+\" },\r\n    { key: \"delete\", special: true, align: \"end\", width: \"w-10\" },\r\n  ],\r\n  [\r\n    { key: \"tab\", special: true, align: \"start\", width: \"w-10\" },\r\n    { key: \"Q\" },\r\n    { key: \"W\" },\r\n    { key: \"E\" },\r\n    { key: \"R\" },\r\n    { key: \"T\" },\r\n    { key: \"Y\" },\r\n    { key: \"U\" },\r\n    { key: \"I\" },\r\n    { key: \"O\" },\r\n    { key: \"P\" },\r\n    { key: \"[\", topChar: \"{\" },\r\n    { key: \"]\", topChar: \"}\" },\r\n    { key: \"\\\\\", topChar: \"|\" },\r\n  ],\r\n  [\r\n    { key: \"caps lock\", special: true, align: \"start\", width: \"w-[2.8rem]\" },\r\n    { key: \"A\" },\r\n    { key: \"S\" },\r\n    { key: \"D\" },\r\n    { key: \"F\" },\r\n    { key: \"G\" },\r\n    { key: \"H\" },\r\n    { key: \"J\" },\r\n    { key: \"K\" },\r\n    { key: \"L\" },\r\n    { key: \";\", topChar: \":\" },\r\n    { key: \"'\", topChar: '\"' },\r\n    { key: \"return\", special: true, align: \"end\", width: \"w-[2.85rem]\" },\r\n  ],\r\n  [\r\n    { key: \"shift\", special: true, align: \"start\", width: \"w-[3.65rem]\" },\r\n    { key: \"Z\" },\r\n    { key: \"X\" },\r\n    { key: \"C\" },\r\n    { key: \"V\" },\r\n    { key: \"B\" },\r\n    { key: \"N\" },\r\n    { key: \"M\" },\r\n    { key: \",\", topChar: \"<\" },\r\n    { key: \".\", topChar: \">\" },\r\n    { key: \"/\", topChar: \"?\" },\r\n    { key: \"shift\", special: true, align: \"end\", width: \"w-[3.65rem]\" },\r\n  ],\r\n  [\r\n    {\r\n      key: \"fn\",\r\n      type: \"modifier\",\r\n      topRight: \"fn\",\r\n      bottomLeft: <TbWorld className=\"h-[6px] w-[6px]\" />,\r\n    },\r\n    {\r\n      key: \"control\",\r\n      type: \"modifier\",\r\n      topRight: <TbChevronUp className=\"h-[6px] w-[6px]\" />,\r\n      bottomLeft: \"control\",\r\n    },\r\n    {\r\n      key: \"option\",\r\n      type: \"modifier\",\r\n      topRight: <PiOption className=\"h-[6px] w-[6px]\" />,\r\n      bottomLeft: \"option\",\r\n    },\r\n    {\r\n      key: \"command\",\r\n      type: \"modifier\",\r\n      topRight: <TbCommand className=\"h-[6px] w-[6px]\" />,\r\n      bottomLeft: \"command\",\r\n      width: \"w-8\",\r\n    },\r\n    {\r\n      key: \"space\",\r\n      width: \"w-[8.2rem]\",\r\n      content: <></>,\r\n    },\r\n    {\r\n      key: \"command2\",\r\n      type: \"modifier\",\r\n      topLeft: <TbCommand className=\"h-[6px] w-[6px]\" />,\r\n      bottomLeft: \"command\",\r\n      width: \"w-8\",\r\n    },\r\n    {\r\n      key: \"option2\",\r\n      type: \"modifier\",\r\n      topLeft: <PiOption className=\"h-[6px] w-[6px]\" />,\r\n      bottomLeft: \"option\",\r\n    },\r\n    {\r\n      key: \"arrows\",\r\n      type: \"arrowKeys\",\r\n    },\r\n  ],\r\n];\r\n\r\nconst Macbook = ({\r\n  children,\r\n  className,\r\n}: {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsOpen(true);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"py-16 md:py-72 flex items-center justify-center\">\r\n      <div\r\n        className={cn(\r\n          \"w-full min-w-[32rem] max-w-[32rem] transform scale-[0.5] sm:scale-60 md:scale-100 lg:scale-105\",\r\n          className\r\n        )}\r\n        style={{\r\n          transformOrigin: \"center center\",\r\n        }}\r\n      >\r\n        <div className=\"relative [perspective:2500px] w-full h-[22rem] mx-auto\">\r\n          <div className=\"h-[22rem] w-full bg-[#403e41] dark:bg-[#6a6b6f] rounded-sm mx-auto absolute bottom-0 left-0 right-0 z-10\">\r\n            <div className=\"flex relative gap-x-1 py-4\">\r\n              <Speakers />\r\n              <Keypad />\r\n              <Speakers />\r\n            </div>\r\n            <div\r\n              className=\"w-[40%] mx-auto h-32 rounded-xl my-1\"\r\n              style={{ boxShadow: \"0px 0px 1px 1px #00000030 inset\" }}\r\n            ></div>\r\n            <div className=\"h-2 w-28 mx-auto inset-x-0 absolute bottom-0 bg-gradient-to-t from-neutral-800 to-neutral-950 rounded-tr-3xl rounded-tl-3xl\" />\r\n          </div>\r\n          <motion.div\r\n            className=\"absolute bottom-[22rem] left-0 right-0 z-20 w-full mx-auto\"\r\n            style={{\r\n              transformOrigin: \"bottom\",\r\n              transformStyle: \"preserve-3d\",\r\n            }}\r\n            initial={{ rotateX: -180 }}\r\n            animate={{ rotateX: isOpen ? -45 : -180 }}\r\n            transition={{\r\n              duration: 1.8,\r\n              ease: [0.16, 1, 0.3, 1],\r\n            }}\r\n          >\r\n            <div\r\n              className=\"h-[22rem] w-full rounded-t-lg p-[2px] relative after:[content:''] after:right-0 after:bottom-0 after:absolute after:top-0 after:left-0 after:bg-[#403e41] after:dark:bg-[#6a6b6f] after:[backface-visibility:hidden] after:[transform:rotateY(180deg)_rotateZ(180deg)] after:[transform-style:preserve-3d] after:rounded-t-lg after:rounded-b-lg after:[background-image:url('/assets/apple.svg')] after:bg-no-repeat after:[background-position:center] after:[background-size:60px]\"\r\n              style={{\r\n                WebkitTransform: \"translate3d(0, 0, 0)\",\r\n                transform: \"translate3d(0, 0, 0)\",\r\n                transformStyle: \"preserve-3d\",\r\n                backfaceVisibility: \"hidden\",\r\n              }}\r\n            >\r\n              <div className=\"absolute inset-0 rounded-t-lg p-[6px] pointer-events-none\">\r\n                <div\r\n                  className=\"absolute inset-0 bg-black rounded-md flex items-center justify-center overflow-hidden\"\r\n                  style={{\r\n                    boxShadow: \"0 0 0 1px rgba(100, 100, 100, 0.3)\",\r\n                    border: \"1px solid rgba(60, 60, 60, 0.8)\",\r\n                  }}\r\n                >\r\n                  <motion.div\r\n                    className=\"w-full h-full flex items-center justify-center p-1 pointer-events-auto\"\r\n                    initial={{ opacity: 0 }}\r\n                    animate={{\r\n                      opacity: isOpen ? 1 : 0,\r\n                      transition: { delay: 1.2, duration: 0.8 },\r\n                    }}\r\n                    style={{\r\n                      transform: \"translateZ(0)\",\r\n                    }}\r\n                  >\r\n                    {children}\r\n                  </motion.div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"h-[3px] w-[95%] mx-auto bg-[#2A2A2A]\"></div>\r\n          </motion.div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Keypad = () => {\r\n  const [pressedKeys, setPressedKeys] = useState<Set<string>>(new Set());\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      setPressedKeys((prev) => {\r\n        const updated = new Set(prev);\r\n        updated.add(e.key.toLowerCase());\r\n        return updated;\r\n      });\r\n    };\r\n\r\n    const handleKeyUp = (e: KeyboardEvent) => {\r\n      setPressedKeys((prev) => {\r\n        const updated = new Set(prev);\r\n        updated.delete(e.key.toLowerCase());\r\n        return updated;\r\n      });\r\n    };\r\n\r\n    // Add event listeners\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    window.addEventListener(\"keyup\", handleKeyUp);\r\n\r\n    // Clean up\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n      window.removeEventListener(\"keyup\", handleKeyUp);\r\n    };\r\n  }, []);\r\n\r\n  const getKeyClassName = (keyData: keyType) => {\r\n    let className = \"\";\r\n\r\n    if (keyData.width) {\r\n      className += ` ${keyData.width}`;\r\n    }\r\n\r\n    if (keyData.align === \"start\") {\r\n      className += \" items-end justify-start pl-[4px] pb-[2px]\";\r\n    } else if (keyData.align === \"end\") {\r\n      className += \" items-end justify-end pr-[4px] pb-[2px]\";\r\n    }\r\n\r\n    if (keyData.type === \"modifier\") {\r\n      className += \" \";\r\n    }\r\n\r\n    return className.trim();\r\n  };\r\n\r\n  const getKeyChildrenClassName = (keyData: keyType) => {\r\n    let className = \"\";\r\n\r\n    if (keyData.align === \"start\") {\r\n      className += \" items-start\";\r\n    } else if (keyData.align === \"end\") {\r\n      className += \" items-end\";\r\n    }\r\n\r\n    if (keyData.type === \"modifier\") {\r\n      className += \" h-full justify-between py-[4px]\";\r\n    }\r\n\r\n    return className.trim();\r\n  };\r\n\r\n  const isKeyPressed = (keyData: keyType) => {\r\n    // Map keyboard UI keys to their corresponding keyboard event keys\r\n    const keyMapping: Record<string, string[]> = {\r\n      command: [\"meta\", \"command\"],\r\n      command2: [\"meta\", \"command\"],\r\n      option: [\"alt\", \"option\"],\r\n      option2: [\"alt\", \"option\"],\r\n      shift: [\"shift\"],\r\n      control: [\"control\", \"ctrl\"],\r\n      ctrl: [\"control\", \"ctrl\"],\r\n      esc: [\"escape\"],\r\n      space: [\" \", \"spacebar\"],\r\n      enter: [\"enter\", \"return\"],\r\n      return: [\"enter\", \"return\"],\r\n      backspace: [\"backspace\"],\r\n      delete: [\"delete\", \"backspace\"],\r\n      tab: [\"tab\"],\r\n      arrowup: [\"arrowup\"],\r\n      arrowdown: [\"arrowdown\"],\r\n      arrowleft: [\"arrowleft\"],\r\n      arrowright: [\"arrowright\"],\r\n      \"caps lock\": [\"capslock\"],\r\n      f1: [\"f1\"],\r\n      f2: [\"f2\"],\r\n      f3: [\"f3\"],\r\n      f4: [\"f4\"],\r\n      f5: [\"f5\"],\r\n      f6: [\"f6\"],\r\n      f7: [\"f7\"],\r\n      f8: [\"f8\"],\r\n      f9: [\"f9\"],\r\n      f10: [\"f10\"],\r\n      f11: [\"f11\"],\r\n      f12: [\"f12\"],\r\n    };\r\n\r\n    const keyToCheck = keyData.key.toLowerCase();\r\n    if (keyMapping[keyToCheck]) {\r\n      return keyMapping[keyToCheck].some((k) => pressedKeys.has(k));\r\n    }\r\n    return pressedKeys.has(keyToCheck);\r\n  };\r\n\r\n  const renderedKeys = useMemo(() => {\r\n    return keys.map((row, rowIndex) => (\r\n      <KeyboardRow key={`row-${rowIndex}`}>\r\n        {row.map((keyData, keyIndex) => {\r\n          if (keyData.key === \"command2\") {\r\n            return (\r\n              <KeyboardKey\r\n                key={`key-${rowIndex}-${keyIndex}`}\r\n                className={keyData.width}\r\n                childrenClassName=\"h-full justify-between py-[4px]\"\r\n                isPressed={isKeyPressed(keyData)}\r\n              >\r\n                <div className=\"flex justify-start w-full pl-1\">\r\n                  <TbCommand className=\"h-[6px] w-[6px]\" />\r\n                </div>\r\n                <div className=\"flex justify-start w-full pl-1\">\r\n                  <span className=\"block\">command</span>\r\n                </div>\r\n              </KeyboardKey>\r\n            );\r\n          }\r\n\r\n          if (keyData.key === \"option2\") {\r\n            return (\r\n              <KeyboardKey\r\n                key={`key-${rowIndex}-${keyIndex}`}\r\n                className={keyData.width}\r\n                childrenClassName=\"h-full justify-between py-[4px]\"\r\n                isPressed={isKeyPressed(keyData)}\r\n              >\r\n                <div className=\"flex justify-start w-full pl-1\">\r\n                  <PiOption className=\"h-[6px] w-[6px]\" />\r\n                </div>\r\n                <div className=\"flex justify-start w-full pl-1\">\r\n                  <span className=\"block\">option</span>\r\n                </div>\r\n              </KeyboardKey>\r\n            );\r\n          }\r\n\r\n          if (keyData.type === \"arrowKeys\") {\r\n            const upPressed = pressedKeys.has(\"arrowup\");\r\n            const downPressed = pressedKeys.has(\"arrowdown\");\r\n            const leftPressed = pressedKeys.has(\"arrowleft\");\r\n            const rightPressed = pressedKeys.has(\"arrowright\");\r\n\r\n            return (\r\n              <div\r\n                key={`key-${rowIndex}-${keyIndex}`}\r\n                className=\"w-[5rem] mt-[2px] h-6 p-[0.5px] rounded-[4px] flex flex-col justify-end items-center\"\r\n              >\r\n                <KeyboardKey className=\"w-6 h-3\" isPressed={upPressed}>\r\n                  <TbCaretUpFilled className=\"h-[6px] w-[6px]\" />\r\n                </KeyboardKey>\r\n                <div className=\"flex\">\r\n                  <KeyboardKey className=\"w-6 h-3\" isPressed={leftPressed}>\r\n                    <TbCaretLeftFilled className=\"h-[6px] w-[6px]\" />\r\n                  </KeyboardKey>\r\n                  <KeyboardKey className=\"w-6 h-3\" isPressed={downPressed}>\r\n                    <TbCaretDownFilled className=\"h-[6px] w-[6px]\" />\r\n                  </KeyboardKey>\r\n                  <KeyboardKey className=\"w-6 h-3\" isPressed={rightPressed}>\r\n                    <TbCaretRightFilled className=\"h-[6px] w-[6px]\" />\r\n                  </KeyboardKey>\r\n                </div>\r\n              </div>\r\n            );\r\n          }\r\n\r\n          return (\r\n            <KeyboardKey\r\n              key={`key-${rowIndex}-${keyIndex}`}\r\n              className={getKeyClassName(keyData)}\r\n              childrenClassName={getKeyChildrenClassName(keyData)}\r\n              isPressed={isKeyPressed(keyData)}\r\n            >\r\n              {keyData.type === \"modifier\" ? (\r\n                <>\r\n                  <div className=\"flex justify-end w-full pr-1\">\r\n                    {keyData.topRight}\r\n                  </div>\r\n                  <div className=\"flex justify-start w-full pl-1\">\r\n                    <span className=\"block\">{keyData.bottomLeft}</span>\r\n                  </div>\r\n                </>\r\n              ) : keyData.content ? (\r\n                keyData.content\r\n              ) : keyData.icon ? (\r\n                <>\r\n                  {keyData.icon}\r\n                  <span className=\"inline-block mt-1\">{keyData.key}</span>\r\n                </>\r\n              ) : keyData.topChar ? (\r\n                <>\r\n                  <span className=\"block\">{keyData.topChar}</span>\r\n                  <span className=\"block\">{keyData.key}</span>\r\n                </>\r\n              ) : (\r\n                <span className=\"block\">{keyData.key}</span>\r\n              )}\r\n            </KeyboardKey>\r\n          );\r\n        })}\r\n      </KeyboardRow>\r\n    ));\r\n  }, [pressedKeys]);\r\n\r\n  return (\r\n    <div className=\"mx-auto w-[80%] bg-transparent/10 h-full rounded-sm\">\r\n      <div className=\"h-full roundend-md mx-1 p-1\">{renderedKeys}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst KeyboardKey = ({\r\n  className,\r\n  children,\r\n  childrenClassName,\r\n  isPressed,\r\n}: {\r\n  className?: string;\r\n  children?: React.ReactNode;\r\n  childrenClassName?: string;\r\n  isPressed?: boolean;\r\n}) => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"p-[.5px] rounded-[3px] group hover:shadow-neutral-800 cursor-auto select-none\",\r\n        !isPressed && \"shadow-sm shadow-neutral-500 dark:shadow-neutral-300\",\r\n        isPressed && \"shadow-sm shadow-neutral-800\"\r\n      )}\r\n    >\r\n      <div\r\n        className={cn(\r\n          \"h-6 w-6 bg-gradient-to-b from-neutral-800 to-neutral-900 rounded-[2.5px] flex items-center justify-center cborder-t-[1px] border-neutral-600 [box-shadow:0px_10px_30px_-30px_#000_inset] group-hover:from-neutral-900 group-hover:to-neutral-950 group-hover:[box-shadow:0px_1px_3px_0px_rgba(0,0,0,0.8)_inset,0px_0px_2px_1px_rgba(0,0,0,0.3)_inset] group-hover:translate-y-[0.25px] group-hover:scale-[0.98]\",\r\n          !isPressed &&\r\n            \"bg-gradient-to-b from-neutral-800 to-neutral-900 border-b-[0.0px] border-t-[1px] border-neutral-600 [box-shadow:0px_10px_30px_-30px_#000_inset]\",\r\n          // Pressed state\r\n          isPressed &&\r\n            \"bg-gradient-to-b from-neutral-900 to-neutral-950 border-t-[0.25px] [box-shadow:0px_1px_3px_0px_rgba(0,0,0,0.8)_inset,0px_0px_2px_1px_rgba(0,0,0,0.3)_inset] translate-y-[0.25px] scale-[0.98]\",\r\n          className\r\n        )}\r\n      >\r\n        <div\r\n          className={cn(\r\n            \"text-neutral-200 text-[5px] w-full flex justify-center items-center flex-col\",\r\n            childrenClassName\r\n          )}\r\n        >\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst KeyboardRow = ({ children }: { children: React.ReactNode }) => {\r\n  return (\r\n    <div className=\"flex gap-[2px] mb-[2px] w-full shrink-0\">{children}</div>\r\n  );\r\n};\r\n\r\nconst Speakers = () => {\r\n  return (\r\n    <div className=\"mx-auto w-[10%] overflow-hidden h-full\">\r\n      <div\r\n        className=\"flex px-[0.5px] gap-[2px] mt-2 h-40\"\r\n        style={{\r\n          backgroundImage:\r\n            \"radial-gradient(circle, #08080A 0.5px, transparent 0.5px)\",\r\n          backgroundSize: \"3px 3px\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Macbook;\r\n",
      "type": "registry:component"
    }
  ]
}
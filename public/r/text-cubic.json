{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-cubic",
  "type": "registry:component",
  "title": "Text Cubic",
  "description": "Text animation with animated letters looking like rubik's cube.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/ui/TextCubic.tsx",
      "content": "\"use client\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n  motion,\r\n  useAnimationControls,\r\n  useMotionValue,\r\n  delay,\r\n} from \"motion/react\";\r\nimport { useEffect, useRef } from \"react\";\r\n\r\nconst topLetterVariants = {\r\n  initial: {\r\n    opacity: 0,\r\n    filter: \"blur(4px)\",\r\n    transform: \"rotateX(-90deg) translateY(-50%)\",\r\n  },\r\n  animate: {\r\n    opacity: 1,\r\n    filter: \"blur(0px)\",\r\n    transform: \"rotateX(0deg) translateY(0%)\",\r\n  },\r\n};\r\n\r\nconst bottomLetterVariants = {\r\n  initial: {\r\n    opacity: 1,\r\n    filter: \"blur(0px)\",\r\n    transform: \"rotateX(0deg) translateY(0%)\",\r\n  },\r\n  animate: {\r\n    opacity: 0,\r\n    filter: \"blur(4px)\",\r\n    transform: \"rotateX(90deg) translateY(50%)\",\r\n  },\r\n};\r\n\r\nconst TextCubic = ({\r\n  text,\r\n  animateOnHover = false,\r\n  className,\r\n}: {\r\n  text: string;\r\n  animateOnHover?: boolean;\r\n  className?: string;\r\n}) => {\r\n  const ref = useRef(null);\r\n  const hasAnimated = useRef(false);\r\n  const controls = useAnimationControls();\r\n  const isAnimating = useMotionValue(false);\r\n\r\n  useEffect(() => {\r\n    if (!animateOnHover) {\r\n      const observer = new IntersectionObserver(\r\n        ([entry]) => {\r\n          if (entry.isIntersecting && !hasAnimated.current) {\r\n            controls.start(\"animate\");\r\n            hasAnimated.current = true;\r\n          }\r\n        },\r\n        { threshold: 0.5 }\r\n      );\r\n\r\n      if (ref.current) {\r\n        observer.observe(ref.current);\r\n      }\r\n\r\n      return () => observer.disconnect();\r\n    }\r\n  }, [controls, animateOnHover]);\r\n\r\n  const handleMouseEnter = () => {\r\n    if (animateOnHover && !isAnimating.get()) {\r\n      isAnimating.set(true);\r\n      controls.start(\"animate\");\r\n    } else {\r\n      isAnimating.set(true);\r\n      controls.start(\"initial\");\r\n      delay(() => {\r\n        isAnimating.set(false);\r\n      }, text.length * 50);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"inline-block perspective-[1000px] transform-gpu\",\r\n        className\r\n      )}\r\n      onMouseEnter={handleMouseEnter}\r\n      ref={ref}\r\n    >\r\n      {text.split(\"\").map((char, i) => (\r\n        <motion.div\r\n          key={i}\r\n          className=\"relative inline-block\"\r\n          style={{\r\n            transformStyle: \"preserve-3d\",\r\n            transition: `transform ${0.5}s ${i * 0.05}s`,\r\n          }}\r\n          animate={controls}\r\n          initial=\"initial\"\r\n        >\r\n          <motion.span\r\n            key={`front-${i}`}\r\n            className=\"inline-block\"\r\n            variants={topLetterVariants}\r\n            transition={{ duration: 0.5, delay: i * 0.05 }}\r\n          >\r\n            {char === \" \" ? \"\\u00A0\" : char}\r\n          </motion.span>\r\n          <motion.span\r\n            key={`back-${i}`}\r\n            className=\"absolute top-0 left-0\"\r\n            variants={bottomLetterVariants}\r\n            transition={{ duration: 0.5, delay: i * 0.05 }}\r\n            style={{\r\n              transformOrigin: \"bottom center\",\r\n              backfaceVisibility: \"hidden\",\r\n            }}\r\n          >\r\n            {char === \" \" ? \"\\u00A0\" : char}\r\n          </motion.span>\r\n        </motion.div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextCubic;\r\n",
      "type": "registry:component"
    }
  ]
}